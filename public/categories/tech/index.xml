<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss
  version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:wfw="http://wellformedweb.org/CommentAPI/"
  
>
  <channel>
    <title>Tech on Combine Art and Sciences</title>
    <link>http://localhost:1313/categories/tech/</link>
    <description>Recent content in Tech on Combine Art and Sciences</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Aug 2023 16:04:26 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于pycomm3包的Ethernet/IP协议的python实现</title>
      <link>http://localhost:1313/posts/p20230809160426/</link>
      <pubDate>Wed, 09 Aug 2023 16:04:26 +0800</pubDate>
      <guid>http://localhost:1313/posts/p20230809160426/</guid>
      <description>&lt;h1 id=&#34;基于pycomm3包的ethernetip协议的python实现&#34;&gt;基于pycomm3包的Ethernet/IP协议的python实现&lt;/h1&gt;&#xA;&lt;p&gt;Ethernet/IP(EIP)协议的通信python实现，用pycomm3包进行支持。&lt;/p&gt;&#xA;&lt;p&gt;Ethernet/IP 协议可能要求包含的功能：隐式报文通信、显示报文通信 (Explicit 讯息通信)、支持UCMM 及Class3&lt;/p&gt;&#xA;&lt;p&gt;如果您需要创建Ethernet/IP协议的自定义实现，则通常需要研究Ethernet/IP规范、处理低级套接字通信、消息编码和解码、消息的组装和拆解以及各种其他特定于协议的细节。这是一项复杂的任务，需要对网络协议和编程有扎实的理解。在大多数情况下，建议使用现有的库或工具来节省时间并确保可靠的通信。&lt;/p&gt;&#xA;&lt;p&gt;Ethernet/IP 协议的从头实现比较复杂，但是也有相关的库可以调用。比如 python 的 pycomm3。&lt;/p&gt;&#xA;&lt;p&gt;pycomm3库抽象了许多Ethernet/IP协议的复杂性，但是了解协议的概念和结构对于有效地使用库并排除可能出现的任何问题仍然很重要。&lt;/p&gt;&#xA;&lt;p&gt;Here&amp;rsquo;s a basic example of how you might use it to communicate with an Ethernet/IP device:&#xA;$ pip install pycomm3&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#====== python通信代码：=========&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pycomm3&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LogixDriver&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Create a LogixDriver instance&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LogixDriver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;192.168.1.100&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# replace &amp;#39;192.168.1.100&amp;#39; with the actual IP address of your device&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Read tag values&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;tag_values&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Tag1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tag2&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# adjust the tag names and values as needed&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Write tag values&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;plc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Tag1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下这段代码将：&#xA;- 定义Ethernet/IP设备的IP地址和端口。&#xA;- 创建到设备的连接&#xA;- 打开一个到设备的会话&#xA;- 读取输入Tag的值并写入值到输出Tag&#xA;- 最后，关闭会话和连接。&lt;/p&gt;</description>
      
    </item>
  </channel>
</rss>
